import utils
import os
import faiss
import numpy as np
import streamlit as st
from openai import OpenAI


class CommercialAgentChatbot:
    def __init__(self):
        utils.configure_openai()
        self.client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))
        # self.index, self.embeddings = self.criar_indice_faiss(faq_data)
        self.historico_conversa = [
            {"role": "assistant", "content": "Ol√°! Como posso te ajudar hoje?"}]
        self.lead_data = ""

    def responder_pergunta_com_historico(self, pergunta):
        prompt = "\n".join(
            [f"Usu√°rio: {pergunta}\n", f"<LEAD_DATA>\n{self.lead_data}\n</LEAD_DATA>", "Se a informa√ß√£o j√° est√° no LEAD_DATA, n√£o pergunte novamente"])
        system_prompt = """
        Voc√™ √© um chatbot Agente Comercial da Pieracciani, especializado em identificar potenciais clientes que se encaixam no perfil ideal para nossa equipe comercial. 
        Seu objetivo √© interagir de forma amig√°vel e eficiente com visitantes do site, 
        coletando informa√ß√µes relevantes para determinar se eles devem ser encaminhados para um atendimento humano mais aprofundado.
        Ao conversar com os usu√°rios, voc√™ deve:
        #Coletar Informa√ß√µes:
        - Pergunte sobre o nome e a empresa do usu√°rio.
        - Identifique o setor de atua√ß√£o e o tamanho da empresa.
        - Entenda as necessidades ou desafios que o usu√°rio est√° enfrentando.
        - √â uma empresa industrial, comercial ou de sevi√ßos?
        - A empresa est√° no regime fiscal de lucro real?
        - A empresa possui t√©cnicos trabalhando em projetos?
        - Os projetos s√£o de produtos novos ou parcialmente modificados?
        - Projetos de processo?
        - As atividades de desenvolvimento ou prepara√ß√£o das mudan√ßas de produto e processo s√£o feitas internamente?
        - A empresa tem parceiros para ajudar nesses desenvolvimentos?
        - Quantas pessoas na empresa trabalham totalmente ou parcialmente para essas mudan√ßas?
        - Uma quantidade aproximada desses t√©cnicos poderia ser estimada?
        - Quantos projetos de inova√ß√µes ou mudan√ßas t√©cnicas aproximadamente est√£o sendo realizados?
        - Nos passe uma ideia do tipo de trabalho de renova√ß√£o de produto ou servi√ßo que s√£o efetuados.
        #Qualificar o Lead:
        Avalie se o setor, tamanho da empresa e necessidades do usu√°rio est√£o alinhados com o perfil de cliente ideal da Pieracciani.
        Utilize perguntas adicionais para clarificar qualquer d√∫vida sobre o potencial do lead.
        #Encaminhar ou Agradecer:
        Se o usu√°rio se qualificar como um potencial cliente, informe que voc√™ ir√° encaminhar suas informa√ß√µes para a equipe comercial, que entrar√° em contato em breve.
        Caso contr√°rio, agrade√ßa o interesse e forne√ßa informa√ß√µes √∫teis ou sugest√µes para futuras intera√ß√µes.
        
        # Quem n√£o √© um cliente ideal e j√° pode ser descartado?
        - Empresas que s√£o MEI, ONG ou pessoa f√≠sica.
        - Busca lei de incentivo para Arte, Esporte, Cultura, Social.

        #Regras:
        - N√£o forne√ßa informa√ß√µes pessoais ou confidenciais.
        - N√£o responda sobre pre√ßos, valores e investimentos nos nossos servi√ßos, isso √© um especialista que ir√° responder.
        - N√£o pergunte para o usu√°rio uma informa√ß√£o que j√° foi coletada e est√° entre as tags <LEAD_DATA> e </LEAD_DATA>.
        - Voc√™ n√£o explica nada, apenas pergunta sobre o que o usu√°rio est√° falando.
        """
        try:
            resposta = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                ]+self.historico_conversa+[{"role": "user", "content": prompt}],
            )
            resposta_texto = resposta.choices[0].message.content.strip()
            self.historico_conversa.append(
                {"role": "user", "content": pergunta})
            self.historico_conversa.append(
                {"role": "assistant", "content": resposta_texto})
            return resposta_texto
        except Exception as e:
            return f"Erro ao obter resposta: {str(e)}"

    def save_lead_data(self, question, awnser):
        print(f"Acessando lead_data da classe: {self.lead_data}")
        prompt = "\n".join(
            [
                f"Informa√ß√µes do Lead atual: {self.lead_data}\n",
                f"Pergunta do sistema para ajudar na classifica√ß√£o do atributo: {question}", f"Nova resposta do Usu√°rio: {awnser}\n",
                "N√£o apague informa√ß√µes j√° existentes, apenas concatene as novas informa√ß√µes em um novo JSON."
            ])
        system_prompt = """
        Sua tarefa √© mesclar as novas informa√ß√µes ao JSON existente.
        - Mantenha todas as chaves e valores anteriores.
        - Adicione apenas novas chaves ou atualize valores se forem mais espec√≠ficos.
        - Formate a sa√≠da como JSON v√°lido.
        """
        try:
            resposta = OpenAI(api_key=os.environ.get("OPENAI_API_KEY")).chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                ]+[{"role": "user", "content": prompt}],
            )
            resposta_texto = resposta.choices[0].message.content.strip()
            resposta_texto = resposta_texto.replace(
                "```json", "").replace("```", "").strip()
            self.lead_data = resposta_texto
            return resposta_texto
        except Exception as e:
            return f"Erro ao obter resposta: {str(e)}"

    def setLeadData(self, lead_data):
        self.lead_data = lead_data


# Configura√ß√£o da interface do Streamlit
st.set_page_config(page_title="Agente Comercial", page_icon="üìÑ")
st.image("https://dev.pierxinovacao.com.br/assets/img/logo.svg", width=120)
st.header('Fale com o Agente Comercial')

# Instancia o chatbot
if 'chatbot' not in st.session_state:
    st.session_state.chatbot = CommercialAgentChatbot()

# chatbot = CommercialAgentChatbot()


# Fun√ß√£o principal para o aplicativo
def main():
    # Inicializa uma lista para armazenar o hist√≥rico de mensagens
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
        if len(st.session_state.chat_history) == 0:
            st.session_state.chat_history.append(
                ("assistant", "Ol√°, sou o Agente Comercial da Pieracciani. \nQual o seu nome?"))

    user_query = st.chat_input(
        placeholder="Como podemos te auxiliar?")

    if user_query:
        # Adiciona a mensagem do usu√°rio ao hist√≥rico
        st.session_state.chat_history.append(("user", user_query))

        # Obt√©m a resposta do chatbot
        resposta = st.session_state.chatbot.responder_pergunta_com_historico(
            user_query)

        # Coleta informa√ß√µes do lead
        print("√∫ltima pergunta do sistema: ",
              st.session_state.chat_history[-2][1])
        new_lead_data = st.session_state.chatbot.save_lead_data(
            st.session_state.chat_history[-2][1], user_query)
        st.session_state.chatbot.setLeadData(new_lead_data)
        print("Lead Data: ", st.session_state.chatbot.lead_data)
        # Adiciona a resposta do assistente ao hist√≥rico
        st.session_state.chat_history.append(("assistant", resposta))

    # Exibe todas as mensagens no hist√≥rico
    for role, message in st.session_state.chat_history:
        with st.chat_message(role):
            st.write(message)


if __name__ == "__main__":
    main()
